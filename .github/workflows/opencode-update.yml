name: Update OpenCode
on:
  schedule:
    # Run daily at 3 AM UTC (1 hour after main update workflow)
    - cron: '0 3 * * *'
  workflow_dispatch:
jobs:
  # First job: Update the main package on x86_64-linux
  update-package:
    runs-on: ubuntu-latest
    outputs:
      updated: ${{ steps.update.outputs.updated }}
      current_version: ${{ steps.update.outputs.current_version }}
      new_version: ${{ steps.update.outputs.new_version }}
    permissions:
      contents: write
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
      - name: Setup Nix
        uses: cachix/install-nix-action@v31
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Update OpenCode package
        id: update
        run: |
          set -euo pipefail

          # Get current version
          current_version=$(nix eval .#packages.x86_64-linux.opencode.version --raw)
          echo "current_version=$current_version" >> $GITHUB_OUTPUT

          # Run nix-update for the main package (including tui and node_modules for x86_64-linux)
          nix run --inputs-from . nixpkgs#nix-update -- \
            --subpackage tui \
            --subpackage node_modules \
            --flake opencode

          # Get new version
          new_version=$(nix eval .#packages.x86_64-linux.opencode.version --raw)
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

          if [ "$current_version" = "$new_version" ]; then
            echo "No update available"
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            echo "Updated from $current_version to $new_version"
            echo "updated=true" >> $GITHUB_OUTPUT

            # Stage the changes
            git add packages/opencode/package.nix
          fi
      - name: Upload updated package
        if: steps.update.outputs.updated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: opencode-x86_64-linux
          path: packages/opencode/package.nix
          retention-days: 1
  # Second job: Update node_modules hashes for other platforms
  update-hashes:
    needs: update-package
    if: needs.update-package.outputs.updated == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS runner (covers both Darwin platforms)
          - os: macos-latest
            platforms: "x86_64-darwin aarch64-darwin"
            cache-key: "darwin"
          # aarch64-linux (native ARM runner)
          - os: ubuntu-22.04-arm
            platforms: "aarch64-linux"
            cache-key: "aarch64-linux"
    permissions:
      contents: write
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
      - name: Download x86_64-linux update
        uses: actions/download-artifact@v4
        with:
          name: opencode-x86_64-linux
          path: packages/opencode/
      - name: Setup Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            system-features = nixos-test benchmark big-parallel kvm
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Update node_modules hashes
        run: |
          set -euo pipefail

          # Update node_modules hashes for each platform in this job
          for platform in ${{ matrix.platforms }}; do
            echo "Updating node_modules hash for $platform..."

            # Run nix-update with --version skip to only update the node_modules hash
            nix run --inputs-from . nixpkgs#nix-update -- \
              --flake \
              --version skip \
              --subpackage tui \
              --subpackage node_modules \
              opencode

            # The above might fail if the hash is already correct, that's ok
          done
      - name: Upload platform-specific update
        uses: actions/upload-artifact@v4
        with:
          name: opencode-${{ matrix.cache-key }}
          path: packages/opencode/package.nix
          retention-days: 1
  # Final job: Merge all updates and create PR
  create-pr:
    needs: [update-package, update-hashes]
    if: needs.update-package.outputs.updated == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: opencode-*
          path: /tmp/artifacts/
      - name: Setup Nix
        uses: cachix/install-nix-action@v31
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Merge updates
        run: |
          # Start with x86_64-linux as base
          cp /tmp/artifacts/opencode-x86_64-linux/package.nix packages/opencode/package.nix

          # Extract hashes from other platform updates and merge them
          for artifact in /tmp/artifacts/opencode-*/package.nix; do
            if [[ "$artifact" == *"darwin"* ]]; then
              # Extract Darwin hashes
              x86_64_darwin=$(grep 'x86_64-darwin = "sha256-' "$artifact" | head -1 || true)
              aarch64_darwin=$(grep 'aarch64-darwin = "sha256-' "$artifact" | head -1 || true)

              if [ -n "$x86_64_darwin" ]; then
                sed -i "s|.*x86_64-darwin = \"sha256-.*|$x86_64_darwin|" packages/opencode/package.nix
              fi
              if [ -n "$aarch64_darwin" ]; then
                sed -i "s|.*aarch64-darwin = \"sha256-.*|$aarch64_darwin|" packages/opencode/package.nix
              fi
            elif [[ "$artifact" == *"aarch64-linux"* ]]; then
              # Extract aarch64-linux hash
              aarch64_linux=$(grep 'aarch64-linux = "sha256-' "$artifact" | head -1 || true)
              if [ -n "$aarch64_linux" ]; then
                sed -i "s|.*aarch64-linux = \"sha256-.*|$aarch64_linux|" packages/opencode/package.nix
              fi
            fi
          done
      - name: Verify build
        run: |
          # Test that the package builds on current platform
          nix build .#packages.x86_64-linux.opencode --no-link
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.app-token.outputs.token }}
          commit-message: "opencode: ${{ needs.update-package.outputs.current_version }} -> ${{ needs.update-package.outputs.new_version }}"
          title: "opencode: ${{ needs.update-package.outputs.current_version }} -> ${{ needs.update-package.outputs.new_version }}"
          body: |
            Automated update of OpenCode from ${{ needs.update-package.outputs.current_version }} to ${{ needs.update-package.outputs.new_version }}
          branch: update-opencode-${{ needs.update-package.outputs.new_version }}
          labels: |
            dependencies
            automated
      - name: Enable auto-merge
        if: steps.cpr.outputs.pull-request-number
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh pr merge ${{ steps.cpr.outputs.pull-request-number }} --auto --merge
